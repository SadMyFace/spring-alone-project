package com.project.www.controller;

import java.security.Principal;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.project.www.security.MemberVO;
import com.project.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@RequestMapping("/member/**")
@Controller
public class MemberController {
	
	private final MemberService msv;
	private final BCryptPasswordEncoder bcEncoder;
	
	@GetMapping("/register")
	public void register() {}
	
	@PostMapping("/register")
	public String register(MemberVO mvo) {
		
		mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		log.info(">>> mvo >>> {} ", mvo);
		int isOk = msv.memberRegister(mvo);
		
		return "index";
	}
	
	@GetMapping("/login")
	public void login() {}
	
	@PostMapping("/login")
	public String loginPost(HttpServletRequest request, RedirectAttributes re) {
		re.addAttribute("email", request.getAttribute("email"));
		re.addAttribute("errMsg", request.getAttribute("errMsg"));
		
		return "redirect:/member/login";
	}
	
	@GetMapping("/modify")
	public void modify(Principal p, Model m) {
		log.info(">>> principal >> email > " + p.getName());
		String email = p.getName();
		m.addAttribute("mvo", msv.detail(email));
	}
	
	@PostMapping("/modify")
	public String modify(MemberVO mvo, HttpServletRequest req, HttpServletResponse res) {
		
		log.info(">>> mvo >>> {} ", mvo);
		if(mvo.getPwd() == null || mvo.getPwd().length() == 0) {
			mvo.setPwd(msv.findPassword(mvo.getEmail()));
		}else {
			mvo.setPwd(bcEncoder.encode(mvo.getPwd()));			
		}
		int isOk = msv.updateMember(mvo);
		
		logout(req, res);
		
		return "member/login";
	}
	
	@GetMapping("/list")
	public void memberList(Model m) {
		
		List<MemberVO> memberList = msv.getMemberList();
		
		m.addAttribute("list", memberList);
		
	}
	
	@GetMapping("/delete")
	public String delete(@RequestParam("email") String email, HttpServletRequest req, HttpServletResponse res) {
		
		log.info(">>> email >>>" + email);
		
		int isOk = msv.deleteMember(email);
		
		log.info(">>> delete Member >>>" + ((isOk > 0) ? "OK" : "Fail"));
		
		logout(req, res);
		
		return "index";
	}
	
	@GetMapping(value = "/checkEmail/{email}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> checkEmail(@PathVariable("email") String email){
		log.info(">>> email >>> " + email);
		
		int isOk = msv.checkEmail(email);
		
		return isOk > 0 ? new ResponseEntity<String>("1", HttpStatus.OK) :  new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
		
	}
	
	private void logout(HttpServletRequest request, HttpServletResponse response) {
		
		Authentication authentication = SecurityContextHolder
				.getContext().getAuthentication();
		new SecurityContextLogoutHandler().logout(request, response, authentication);
		
	}
}
